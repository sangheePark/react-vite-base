{
	"Import Emotion Style component": {
		"prefix": "iesc",
		"body": [
			"import styled from '@emotion/styled'",
			"import { CSSProperties } from 'react'",
			"",
			"const ${2:default}CSS: CSSProperties = {}",
			"",
			"export const Styled${1:${TM_FILENAME/(.*).style.tsx?/${1}/}} = styled.${3:div}(",
			"\t{",
			"\t\t...${2}CSS",
			"\t},",
			"\tprops => {",
			"\t\tconst { id } = props",
			"\t\treturn { id }",
			"\t}",
			")",
			""
		]
	},
	"Import Emotion Style component Props": {
		"prefix": "iescp",
		"body": [
			"import styled from '@emotion/styled'",
			"import { CSSProperties } from 'react'",
			"",
			"export interface IStyled${1:${TM_FILENAME/(.*).style.tsx?/${1}/}}Props {}",
			"",
			"const ${2:default}CSS: CSSProperties = {}",
			"",
			"export const Styled${1} = styled.${3:div}<IStyled${1}Props>(",
			"\t{",
			"\t\t...${2}CSS",
			"\t},",
			"\tprops => {",
			"\t\tconst { id } = props",
			"\t\treturn { id }",
			"\t}",
			")",
			""
		]
	},
	"Emotion Style component": {
		"prefix": "esc",
		"body": [
			"const ${2:default}CSS: CSSProperties = {}",
			"",
			"export const Styled${1:Component} = styled.${3:div}(",
			"\t{",
			"\t\t...${2}CSS",
			"\t},",
			"\tprops => {",
			"\t\tconst { id } = props",
			"\t\treturn { id }",
			"\t}",
			")",
			""
		]
	},
	"React.FC Props": {
		"prefix": "rfcp",
		"body": [
			"export interface I${1:${TM_FILENAME/(.*).tsx?/${1}/}}Props {}",
			"",
			"const ${1}: React.FC<React.PropsWithChildren<I${1}Props>> = ({ ${2:children} }) => {",
			"\treturn (",
			"\t\t<>{children}</>",
			"\t);",
			"};",
			"",
			"export default ${1};",
			""
		]
	},
	"React.FC": {
		"prefix": "rfc",
		"body": [
			"const ${1:Component}: React.FC${2:<React.PropsWithChildren>} = (${0:{children}}) => {",
			"\treturn (",
			"\t\t<>{children}</>",
			"\t);",
			"};",
			"",
			"export ${1};",
			""
		]
	},
	"function component Props": {
		"prefix": "fcp",
		"body": [
			"export interface I${1:${TM_FILENAME/(.*).tsx?/${1}/}}Props {}",
			"",
			"//use only generic component",
			"export function ${1}({ ${0:children} }: React.PropsWithChildren<I${1}Props>) {",
			"\treturn (",
			"\t\t<>{children}</>",
			"\t);",
			"};",
			""
		]
	},
	"function component": {
		"prefix": "fc",
		"body": [
			"//use only generic component",
			"export function ${1:Component}(${0:{ children }}: React.PropsWithChildren) {",
			"\treturn (",
			"\t\t<>{children}</>",
			"\t);",
			"};"
		]
	},
	"useState hook": {
		"prefix": "ust",
		"body": ["const [$1, set${1/(.*)/${1:/capitalize}/}] = useState$0<${2:string}>(${3:''})"]
	},
	"useEffect hook": {
		"prefix": "uef",
		"body": ["useEffect$0(() => {", "\t$1", "}, [$2])"]
	},
	"useMemo hook": {
		"prefix": "ume",
		"body": ["const ${1} = useMemo$0(() => {", "\treturn ${3:};", "}, [${2:}])"]
	},
	"useCallback hook": {
		"prefix": "uca",
		"body": ["const ${1} = useCallback$0((${3:}) => {", "\t${4:}", "}, [${2:}])"]
	},
	"useNavigate hook": {
		"prefix": "una",
		"body": ["const navigate  = useNavigate$0()"]
	},
	"임포트 storybook ": {
		"prefix": "isb",
		"body": [
			"import { ComponentMeta, ComponentStory, ComponentStoryFn } from '@storybook/react';",
			"",
			"import ${1:${TM_FILENAME_BASE/.(?:story|stories).*//gi}} from './${1:${TM_FILENAME_BASE/.(?:story|stories).*//gi}}';",
			"",
			"export default {",
			"\ttitle: 'Components/${2:atomic}/${1:${TM_FILENAME_BASE/.(?:story|stories).*//gi}}',",
			"\tcomponent: ${1:${TM_FILENAME_BASE/.(?:story|stories).*//gi}},",
			"} as ComponentMeta<typeof ${1:${TM_FILENAME_BASE/.(?:story|stories).*//gi}}>;",
			"",
			"const Template: ComponentStory<typeof ${1:${TM_FILENAME_BASE/.(?:story|stories).*//gi}}> = args => <${1:${TM_FILENAME_BASE/.(?:story|stories).*//gi}} {...args} />;",
			"",
			"export const Default${1:${TM_FILENAME_BASE/.(?:story|stories).*//gi}}: ComponentStoryFn<typeof ${1:${TM_FILENAME_BASE/.(?:story|stories).*//gi}}> = Template.bind({});",
			"Default${1:${TM_FILENAME_BASE/.(?:story|stories).*//gi}}.args = {",
			"\t${3}",
			"};"
		],
		"description": "Scaffold a Basic Story Setup using CSF 2.0 (React TS)"
	},
	"storybook Template": {
		"prefix": "sbt",
		"body": ["export const ${1} = Template.bind({})", "${1}.args = {", "\t${0}", "}"]
	},
	"임포트 zustand": {
		"prefix": "izu",
		"body": [
			"import { create } from 'zustand'",
			"import { devtools, persist } from 'zustand/middleware'",
			"",
			"export interface I${1:${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}}Prop {",
			"\t${2:value}: ${3:string}${0}",
			"}",
			"export interface I${1}Function {",
			"\tset${2/(.*)/${1:/capitalize}/}: (${2}: ${3:string}) => void",
			"}",
			"const defaultValue: I${1}Prop = {",
			"\t${2}: ''",
			"}",
			"const use${1} = create(",
			"\tdevtools(",
			"\t\tpersist<I${1}Prop & I${1}Function>(",
			"\t\t\tset => ({",
			"\t\t\t\t...defaultValue,",
			"\t\t\t\tset${2/(.*)/${1:/capitalize}/}: (${2}: ${3:string}) =>",
			"\t\t\t\t\tset(prev => ({",
			"\t\t\t\t\t\t...prev,",
			"\t\t\t\t\t\t${2}",
			"\t\t\t\t\t}))",
			"\t\t\t}),",
			"\t\t\t{ name: 'use${1}' }",
			"\t\t),",
			"\t\t{ enabled: import.meta.env.DEV }",
			"\t)",
			")",
			"export default use${1}"
		]
	},
	"onClick type": {
		"prefix": "onClickType",
		"body": ["onClick?: (event: React.MouseEvent<${1:HTMLButtonElement}${0}>) => void"]
	},
	"onClick handler": {
		"prefix": "onClick",
		"body": ["const onClickHandler = useCallback${0}((event: React.MouseEvent<${1:HTMLButtonElement}>) => {", "\t", "}, [${2}])"]
	},
	"Model Base namespaces": {
		"prefix": "mbn",
		"body": [
			"/**",
			" * @description ",
			" */",
			"export namespace ${1:${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}} {",
			"\t/**",
			"\t * @description base entity",
			"\t */",
			"\texport interface Entity {",
			"\t\tid: string",
			"\t}",
			"\t/**",
			"\t * @description 요청",
			"\t */",
			"\texport interface Request {",
			"\t\t//속성",
			"\t}",
			"\t/**",
			"\t * @description 응답",
			"\t */",
			"\texport interface Response extends Entity {",
			"\t\t//상속, Pick 또는 Omit",
			"\t}",
			"\t/**",
			"\t * @description 조회 조건",
			"\t */",
			"\texport interface Filter extends Pick<Entity, 'id'> {",
			"\t\t//상속, Pick 또는 Omit",
			"\t}",
			"}"
		]
	},
	"임포트 + CRUD Service Base": {
		"prefix": "icrud",
		"body": [
			"import http from '@/config/api'",
			"import { EAPI } from '@/enums/endpoint'",
			"import { MResult } from '@/model/apiModel'",
			"import { ${1/(.*)/${1:/capitalize}/}Model } from '@/model/${1:${TM_FILENAME_BASE/Service.*/${1}/}}/${1/(.*)/${1:/camelcase}/}Model'",
			"/**",
			" * @description serviceNamespace",
			" */",
			"export namespace ${1/(.*)/${1:/capitalize}/}Service {",
			"\t/**",
			"\t * @description list",
			"\t */",
			"\texport const list = (params: ${1/(.*)/${1:/capitalize}/}Model.Filter): Promise<MResult<${1/(.*)/${1:/capitalize}/}Model.Response[]>> => {",
			"\t\treturn http.post<${1/(.*)/${1:/capitalize}/}Model.Response[]>(EAPI.${1/(.*)/${1:/upcase}/}.LIST, params)",
			"\t}",
			"\t/**",
			"\t * @description detail",
			"\t */",
			"\texport const detail = (params: ${1/(.*)/${1:/capitalize}/}Model.Filter): Promise<MResult<${1/(.*)/${1:/capitalize}/}Model.Response>> => {",
			"\t\treturn http.get<${1/(.*)/${1:/capitalize}/}Model.Response>(EAPI.${1/(.*)/${1:/upcase}/}.DETAIL + params.id)",
			"\t}",
			"\t/**",
			"\t * @description add",
			"\t */",
			"\texport const add = (params: ${1/(.*)/${1:/capitalize}/}Model.Request): Promise<MResult<${1/(.*)/${1:/capitalize}/}Model.Response>> => {",
			"\t\treturn http.post<${1/(.*)/${1:/capitalize}/}Model.Response>(EAPI.${1/(.*)/${1:/upcase}/}.ADD, params)",
			"\t}",
			"\t/**",
			"\t * @description edit",
			"\t */",
			"\texport const edit = (params: ${1/(.*)/${1:/capitalize}/}Model.Request): Promise<MResult<${1/(.*)/${1:/capitalize}/}Model.Response>> => {",
			"\t\treturn http.post<${1/(.*)/${1:/capitalize}/}Model.Response>(EAPI.${1/(.*)/${1:/upcase}/}.EDIT, params)",
			"\t}",
			"\t/**",
			"\t * @description remove",
			"\t */",
			"\texport const remove = (params: ${1/(.*)/${1:/capitalize}/}Model.Request): Promise<MResult<${1/(.*)/${1:/capitalize}/}Model.Response>> => {",
			"\t\treturn http.post<${1/(.*)/${1:/capitalize}/}Model.Response>(EAPI.${1/(.*)/${1:/upcase}/}.REMOVE, params)",
			"\t}",
			"}"
		]
	},
	"CRUD Service Base": {
		"prefix": "crud",
		"body": [
			"/**",
			" * @description list",
			" */",
			"export const list = (params: ${1:Example}Model.Filter): Promise<MResult<${1}Model.Response[]>> => {",
			"\treturn http.post<${1}Model.Response[]>(EAPI.${1/(.*)/${1:/upcase}/}.LIST, params)",
			"}",
			"/**",
			" * @description detail",
			" */",
			"export const detail = (params: ${1}Model.Filter): Promise<MResult<${1}Model.Response>> => {",
			"\treturn http.get<${1}Model.Response>(EAPI.${1/(.*)/${1:/upcase}/}.DETAIL + params.id)",
			"}",
			"/**",
			" * @description add",
			" */",
			"export const add = (params: ${1}Model.Request): Promise<MResult<${1}Model.Response>> => {",
			"\treturn http.post<${1}Model.Response>(EAPI.${1/(.*)/${1:/upcase}/}.ADD, params)",
			"}",
			"/**",
			" * @description edit",
			" */",
			"export const edit = (params: ${1}Model.Request): Promise<MResult<${1}Model.Response>> => {",
			"\treturn http.post<${1}Model.Response>(EAPI.${1/(.*)/${1:/upcase}/}.EDIT, params)",
			"}",
			"/**",
			" * @description remove",
			" */",
			"export const remove = (params: ${1}Model.Request): Promise<MResult<${1}Model.Response>> => {",
			"\treturn http.post<${1}Model.Response>(EAPI.${1/(.*)/${1:/upcase}/}.REMOVE, params)",
			"}"
		]
	},
	"API Base Path": {
		"prefix": "abp",
		"body": [
			"/**",
			" * @description ",
			" */",
			"export default {",
			"\tLIST: '/${1:${TM_FILENAME_BASE/(.*)/${1:/camelcase}/}}'",
			"\tDETAIL: '/$1/'",
			"\tADD: '/$1/add'",
			"\tEDIT: '/$1/edit'",
			"\tREMOVE: '/$1/remove'",
			"}"
		]
	}
}
